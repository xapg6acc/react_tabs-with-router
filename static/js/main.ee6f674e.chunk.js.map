{"version":3,"sources":["components/HomePage/HomePage.tsx","components/NotFoundPage/NotFoundPage.tsx","components/TabsPage/TabsPage.tsx","App.tsx","index.tsx"],"names":["HomePage","NotFoundPage","tabsFromServer","id","title","content","TabsPage","tabs","map","item","tab","className","App","type","to","path","element","replace","ReactDOM","render","document","getElementById"],"mappings":"mNAEaA,EAAqB,kBAAM,6CCA3BC,EAAyB,kBAAM,uDCUtCC,EAAiB,CACrB,CAAEC,GAAI,QAASC,MAAO,QAASC,QAAS,eACxC,CAAEF,GAAI,QAASC,MAAO,QAASC,QAAS,eACxC,CAAEF,GAAI,QAASC,MAAO,QAASC,QAAS,gBAG7BC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAgC1C,OACE,gCACGL,EAAeM,KAAI,SAAAC,GAAI,OACtB,8BACGA,OAIJF,EAAKC,KAAI,SAAAE,GAAG,OACX,qBAEEC,UAAU,OADLD,EAAIP,WCnDbD,G,MAAiB,CACrB,CAAEC,GAAI,QAASC,MAAO,QAASC,QAAS,eACxC,CAAEF,GAAI,QAASC,MAAO,QAASC,QAAS,eACxC,CAAEF,GAAI,QAASC,MAAO,QAASC,QAAS,iBA0B3BO,EAvBH,kBACV,sBAAKD,UAAU,MAAf,UACE,kDACA,yBAAQE,KAAK,SAASF,UAAU,kCAAhC,UACE,sBAAMA,UAAU,uBAChB,cAAC,IAAD,CAAMG,GAAG,IAAIH,UAAU,2BAAvB,0BAGF,yBAAQE,KAAK,SAASF,UAAU,kCAAhC,UACE,sBAAMA,UAAU,uBAChB,cAAC,IAAD,CAAMG,GAAG,QAAQH,UAAU,2BAA3B,0BAGF,eAAC,IAAD,WACE,cAAC,IAAD,CAAOI,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,CAAUT,KAAML,MAC7C,cAAC,IAAD,CAAOa,KAAK,eAAeC,QAAS,cAAC,EAAD,CAAUT,KAAML,MACpD,cAAC,IAAD,CAAOa,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAUC,SAAO,EAACH,GAAG,eC7BxDI,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ee6f674e.chunk.js","sourcesContent":["import React from 'react';\n\nexport const HomePage: React.FC = () => <>Home</>;\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => <>Not Found Page</>;\n","// import { useState, useEffect } from 'react'; //  useEffect, useMemo,\n// import {\n//   useParams, NavLink, // Link, Routes, Route,\n// } from 'react-router-dom';\n// import { TabPage } from '../TabPage/TabPage';\nimport { Tab } from '../Types/Types';\n// import './TabPage.scss';\n\ntype Props = {\n  tabs: Tab[];\n};\n\nconst tabsFromServer = [\n  { id: 'tab-1', title: 'Tab 1', content: 'Some text 1' },\n  { id: 'tab-2', title: 'Tab 2', content: 'Some text 2' },\n  { id: 'tab-3', title: 'Tab 3', content: 'Some text 3' },\n];\n\nexport const TabsPage: React.FC<Props> = ({ tabs }) => {\n  // const [tabs, setTabs] = useState<Tab[]>([]);\n  // const { tabId } = useParams<{ tabId: string }>();\n  // const activeTab = tabsFromServer.find(tab => tab.id === tabId);\n  // const { tabId } = useParams<{ tabId: string }>();\n  // const legitId = tabs.map(tab => tab.id);\n  // const [selectedTab, setSelectedTab] = useState<Tab | null>(null);\n  // const [isTabSelected, setIsTabSelected] = useState(false);\n\n  // useEffect(() => {\n  //   if (tabId && !legitId.includes(tabId)) {\n  //     setSelectedTab(null);\n  //     setIsTabSelected(false);\n  //   }\n\n  //   if (tabId && legitId.includes(tabId)) {\n  //     setSelectedTab(tabs[+tabId[tabId.length - 1] - 1]);\n  //     setIsTabSelected(true);\n  //   }\n  // }, [tabId]);\n\n  // const findedTab = useMemo(() => {\n  //   return tabs.map(tab => ({\n  //     ...tab,\n  //     tab: tabsFromServer.find(x => x.id === tabId),\n  //   }));\n  // }, [tabs]);\n\n  // useEffect(() => {\n  //   setTabs(findedTab);\n  // }, []);\n\n  return (\n    <div>\n      {tabsFromServer.map(item => (\n        <div>\n          {item}\n        </div>\n      ))}\n\n      {tabs.map(tab => (\n        <div\n          key={tab.id}\n          className=\"tab\"\n        >\n          {/* <NavLink\n            to={`/cards/${tab.id}`}\n            // className={classNames(\n            //   'tab__button',\n            //   { selected: tabId === tab.id && isTabSelected },\n            // )}\n            onClick={() => {\n              setIsTabSelected(true);\n              setSelectedTab(tab);\n            }}\n          >\n            {tab.title}\n          </NavLink> */}\n        </div>\n      ))}\n\n      {/* {isTabSelected && (\n        <>selected</>\n      )}\n\n      {selectedTab && (\n        <div className=\"tabs-list__content\">\n          {selectedTab.content}\n        </div>\n      )} */}\n\n      {/* {activeTab} */}\n\n      {/* {tabs.map(tab => (\n        <div>\n          <TabPage tab={tab} />\n        </div>\n      ))} */}\n      {/* <button type=\"button\">\n        <span className=\"mdc-button__ripple\" />\n        <Link to=\"/tab\">{activeTab}</Link>\n      </button>\n\n      <Routes>\n        <Route path=\"/tab\" element={<TabPage tab={findedTab} />} />\n      </Routes> */}\n    </div>\n  );\n};\n","import {\n  Route, Navigate, Link, Routes,\n} from 'react-router-dom';\n\nimport { HomePage } from './components/HomePage/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage/NotFoundPage';\nimport { TabsPage } from './components/TabsPage/TabsPage';\nimport './App.scss';\n\nconst tabsFromServer = [\n  { id: 'tab-1', title: 'Tab 1', content: 'Some text 1' },\n  { id: 'tab-2', title: 'Tab 2', content: 'Some text 2' },\n  { id: 'tab-3', title: 'Tab 3', content: 'Some text 3' },\n];\n\nconst App = () => (\n  <div className=\"App\">\n    <h1>Tabs with router</h1>\n    <button type=\"button\" className=\"mdc-button mdc-button--outlined\">\n      <span className=\"mdc-button__ripple\" />\n      <Link to=\"/\" className=\"mdc-button__label button\">Home page</Link>\n    </button>\n\n    <button type=\"button\" className=\"mdc-button mdc-button--outlined\">\n      <span className=\"mdc-button__ripple\" />\n      <Link to=\"/tabs\" className=\"mdc-button__label button\">Tabs page</Link>\n    </button>\n\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n      <Route path=\"/tabs\" element={<TabsPage tabs={tabsFromServer} />} />\n      <Route path=\"/tabs/:tabId\" element={<TabsPage tabs={tabsFromServer} />} />\n      <Route path=\"*\" element={<NotFoundPage />} />\n      <Route path=\"/home\" element={<Navigate replace to=\"/\" />} />\n    </Routes>\n  </div>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}